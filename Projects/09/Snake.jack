/** implements and handles a graphical snake */

class Snake {

    // the game the snake is playing in
    field SnakeGame game;

    // the XY position of the snake's head
    field int posX, posY;

    // the length of the snake
    field int length;

    // how much the snake grows by when it eats
    field int growby;

    // how much the snake has left to grow
    field int togrow;

    // the direction the snake is/was moving
    // 0=none,1=up,2=down,3=left,4=right
    field int dir, lastDir;

    // the history of the snake's movements
    field Array pastX, pastY;
    field int pastSize;


    // creates a new Snake
    // args are X/Y position of head, length and how much to grow by
    constructor Snake new(SnakeGame currGame, int x1, int y1, int initLen, int fixedGrowby) {
        var int i;
        let game = currGame;
        let posX = x1 - initLen;
        let posY = y1;
        let length = initLen;
        let growby = fixedGrowby;

        let togrow = 0;
        let dir = 4;
        let lastDir = 4;
        let pastSize = 512;
        let pastX = Array.new(pastSize);
        let pastY = Array.new(pastSize);

        // draws the initial snake
        let i = 0;
        while( i < length ) {
            let posX = posX + 1;
            do drawHead(game.getIteration());
            let i = i + 1;
            do game.nextIteration();
        }

        return this;
    }

    // disposes of a Snake
    method void dispose() {
        do pastX.dispose();
        do pastY.dispose();
        do Memory.deAlloc(this);
        return;
    }

    // checks if the snake's past needs to be restarted
    method boolean ifRestartPast() {
        if( game.getIteration() = pastSize ) {
            do restartPast();
            return true;
        }
        return false;
    }

   // rewrites the snake's past
    method void restartPast() {
        var int i, src, dst;
        let i = length;
        let dst = 0;
        let src = pastSize - length;

        while( i > 0 ) {
            let pastX[dst] = pastX[src];
            let pastY[dst] = pastY[src];
            let src = src + 1;
            let dst = dst + 1;
            let i = i - 1;
        }

        return;
    }

    /**
    Getters
    */
    method int posX() {
        return posX;
    }
    method int posY() {
        return posY;
    }
    method int getLength() {
        return length;
    }
    method int getDir() {
        return dir;
    }

    method int getLastDir() {
        return lastDir;
    }

    /**
    Setters
    */
    method void setDir(int newdir) {
        let dir = newdir;
        return;
    }

    method void setLastDirection() {
        let lastDir = dir;
        return;
    }

    // checks if we can move one more space in the current direction
    method boolean tryMove() {
        var SnakeBoard board;
        let board = game.getBoard();
        if( dir = 1 ) { // up
            
            if( posY = 0 ) {
                let posY = board.sizeY();
            }
            else {
                let posY = posY - 1;
            }
        }
        if( dir = 2 ) { // down
            
            if( posY = board.sizeY() ) {
                let posY = 0;
            }
            else {
                let posY = posY + 1;
            }
        }
        if( dir = 3 ) {  // left
           
            if( posX = 0 ) {
                let posX = board.sizeX() -4;
            }
            else {
                let posX = posX - 1;
            }
        }
        if( dir = 4 ) {   // right
          
            if( posX = (board.sizeX() - 2) ) {
                let posX = 0;
            }
            else {
                let posX = posX + 1;
            }
        }

        // check if the snake has hit itself
        if( board.ifOccupied(posX, posY) ) {
            return false;
        }
        return true;
    }

    // makes the snake grow
    method void grow(int iteration) {
        do drawHead(iteration);
        if( togrow > 0 ) {
            let togrow = togrow - 1;
            let length = length + 1;
        }
        else {
            do clearTail(iteration);
        }
        return;
    }

    // draws the current head of the snake
    method void drawHead(int iteration) {
        var SnakeBoard board;
        let board = game.getBoard();
        do board.drawSnakeBit(posX, posY);
        let pastX[iteration] = posX;
        let pastY[iteration] = posY;
        return;
    }

    // clears the current tail of the snake
    method void clearTail(int iteration) {
        var SnakeBoard board;
        var int tailIndex, tailX, tailY;
        let tailIndex = iteration - length;
        let tailX = pastX[tailIndex];
        let tailY = pastY[tailIndex];
        let board = game.getBoard();
        do board.clearSnakeBit(tailX, tailY);
        return;
    }

    // the snake eats
    method void eatFood() {
        let togrow = togrow + growby;
        return;
    }

}