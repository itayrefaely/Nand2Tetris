/**
 * In the game of Snake, the player uses the arrow keys to move a "snake" around the board.
 * As the snake finds food, it eats the food, and thereby grows larger and becomes faster. 
 * The game ends when the snake moves into itself. 
 * The goal is to make the snake as large as possible before that happens.
 */

 // constructed by Uriya Yakobi and Itay Refaely, Nand2Tetris, Reichman University

class SnakeGame {
    // the Snake
    field Snake snake;

    // the game board
    field SnakeBoard board;

    // the score
    field int score;

    // the level (how much food was eaten + 1)
    field int level;

    // the game iteration
    field int iteration;

    // the snake's speed
    field int delay;

    // start the game after a key is pressed
    field int start;

     // creates a new SnakeGame
    constructor SnakeGame new() {

   
        
        // start the game after a key is pressed
        var int initSpeed;
        do Output.printString("Welcome to Uriya & Itay's SnakeGame, enjoy!");
        do Output.println();
        do Output.println();
        do Output.printString("Press q to quit any time");
        do Output.println();
        do Output.println();
        do Output.printString("Recommended speed: Beginner 1-4, Intermediate 5-7, Expert 8-9,");
        do Output.printString("                     Ran Navok 10");
        do Output.println();
        do Output.println();
        let initSpeed = Keyboard.readInt("Enter speed between 1-10 then press enter to start the game: ");

        do Screen.clearScreen();
        let score = 0;
        let level = 1;
        let iteration = 0;
        let delay = 100 - ((initSpeed - 1) * 10);

        // create the board
        let board = SnakeBoard.new(this, 512, 264);

        // create the snake
        let snake = Snake.new(this, board.sizeX() / 2, board.sizeY() / 2, 15, 3);

        do board.locFood();
        do board.drawStatus();
        return this;
    }

    // disposes of a SnakeGame
    method void dispose() {
        do snake.dispose();
        do board.dispose();
        do Memory.deAlloc(this);
        return;
    }

    // run the game
    method void run() {

        var boolean broken;
        var boolean stop;
        var int key;
        var int temp;
        let stop = false;

        while(~stop) {

            do snake.setLastDirection();

            let key = Keyboard.keyPressed();

            if( key = 81 ) { // q
                
                let stop = true;
            }

            if( key = 130 ) { // left arrow, valid only if we were going up or down
                
                if( snake.getLastDir() = 1 ) {
                    do snake.setDir(3);
                }
                if( snake.getLastDir() = 2 ) {
                    do snake.setDir(3);
                }
            }
            if( key = 131 ) { // up arrow, valid only if we were going left or right
                
                if( snake.getLastDir() = 3 ) {
                    do snake.setDir(1);
                }
                if( snake.getLastDir() = 4 ) {
                    do snake.setDir(1);
                }
            }
            if( key = 132 ) { // right arrow, valid only if we were going up or down
                
                if( snake.getLastDir() = 1 ) {
                    do snake.setDir(4);
                }
                if( snake.getLastDir() = 2 ) {
                    do snake.setDir(4);
                }
            }
            if( key = 133 ) { // down arrow, valid only if we were going left or right
                
                if( snake.getLastDir() = 3 ) {
                    do snake.setDir(2);
                }
                if( snake.getLastDir() = 4 ) {
                    do snake.setDir(2);
                }
            }

            // try to move in a current direction
            if( ~ snake.tryMove() ) {
                do board.drawCrashed();
                do Sys.halt();
            }

            // check if eaten the food 
            if( board.checkFood(snake.posX(), snake.posY()) ) {
                do snake.eatFood();
                do nextLevel();
                do board.locFood();
            }

            // draw new head, grow if food was eaten, clear tail otherwise
            do snake.grow(iteration);

            // redraw the food, score, delay and increment the iteration
            do board.drawFood();
            do board.drawStatus();
            do Sys.wait(delay);
            do nextIteration();

            // check if the snake's past needs to be restarted
            if( snake.ifRestartPast() ) {
                let iteration = snake.getLength();
            }
        }
    
        do Sys.halt();
        return;
    }

    // kicks the game to the next level
    method void nextLevel() {

        let score = score + (5 * level);
        let level = level + 1;
        if( delay > 20 ) {
            let delay = delay - 5;
        }
        
        return;
    }

    // increment the iteration count by 1
    method int nextIteration() {
        let iteration = iteration + 1;
        return iteration;
    }

    /**
    Getters
    */
    method SnakeBoard getBoard() {
        return board;
    }
    method Snake getSnake() {
        return snake;
    }
    method int getIteration() {
        return iteration;
    }
    method int getScore() {
        return score;
    }

    method int getLevel() {
        return level;
    }
    

}